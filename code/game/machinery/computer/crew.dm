/// How often the sensor data is updated
#define SENSORS_UPDATE_PERIOD	10 SECONDS //How often the sensor data updates.
/// The job sorting ID associated with otherwise unknown jobs
#define UNKNOWN_JOB_ID			81

/obj/machinery/computer/crew
	name = "консоль мониторинга за экипажем"
	desc = "Используется для контроля активных датчиков здоровья, встроенных в большую часть формы экипажа."
	icon_screen = "crew"
	icon_keyboard = "med_key"
	circuit = /obj/item/circuitboard/computer/crew
	light_color = LIGHT_COLOR_BLUE

/obj/machinery/computer/crew/Initialize(mapload, obj/item/circuitboard/C)
	. = ..()
	AddComponent(/datum/component/usb_port, list(
		/obj/item/circuit_component/medical_console_data,
	))

/obj/item/circuit_component/medical_console_data
	display_name = "Crew Monitoring Data"
	desc = "Outputs the medical statuses of people on the crew monitoring computer, where it can then be filtered with a Select Query component."
	circuit_flags = CIRCUIT_FLAG_INPUT_SIGNAL|CIRCUIT_FLAG_OUTPUT_SIGNAL

	/// The records retrieved
	var/datum/port/output/records

	var/obj/machinery/computer/crew/attached_console

/obj/item/circuit_component/medical_console_data/populate_ports()
	records = add_output_port("Crew Monitoring Data", PORT_TYPE_TABLE)

/obj/item/circuit_component/medical_console_data/register_usb_parent(atom/movable/shell)
	. = ..()
	if(istype(shell, /obj/machinery/computer/crew))
		attached_console = shell

/obj/item/circuit_component/medical_console_data/unregister_usb_parent(atom/movable/shell)
	attached_console = null
	return ..()

/obj/item/circuit_component/medical_console_data/get_ui_notices()
	. = ..()
	. += create_table_notices(list(
		"name",
		"job",
		"life_status",
		"suffocation",
		"toxin",
		"burn",
		"brute",
		"location",
	))


/obj/item/circuit_component/medical_console_data/input_received(datum/port/input/port)

	if(!attached_console || !GLOB.crewmonitor)
		return

	var/list/new_table = list()
	for(var/list/player_record as anything in GLOB.crewmonitor.update_data(attached_console.z))
		var/list/entry = list()
		entry["name"] = player_record["name"]
		entry["job"] = player_record["assignment"]
		entry["life_status"] = player_record["life_status"]
		entry["suffocation"] = player_record["oxydam"]
		entry["toxin"] = player_record["toxdam"]
		entry["burn"] = player_record["burndam"]
		entry["brute"] = player_record["brutedam"]
		entry["location"] = player_record["area"]

		new_table += list(entry)

	records.set_output(new_table)

/obj/machinery/computer/crew/syndie
	icon_keyboard = "syndie_key"

/obj/machinery/computer/crew/interact(mob/user)
	GLOB.crewmonitor.show(user,src)

GLOBAL_DATUM_INIT(crewmonitor, /datum/crewmonitor, new)

/datum/crewmonitor
	/// List of user -> UI source
	var/list/ui_sources = list()
	/// Cache of data generated by z-level, used for serving the data within SENSOR_UPDATE_PERIOD of the last update
	var/list/data_by_z = list()
	/// Cache of last update time for each z-level
	var/list/last_update = list()
	/// Map of job to ID for sorting purposes
	var/list/jobs = list(
		// Note that jobs divisible by 10 are considered heads of staff, and bolded
		// 00: Captain
		JOB_CAPTAIN = 00,
		// 10-19: Security
		JOB_HEAD_OF_SECURITY = 10,
		JOB_WARDEN = 11,
		JOB_SECURITY_OFFICER = 12,
		JOB_SECURITY_OFFICER_SUPPLY = 12.1,
		JOB_SECURITY_OFFICER_ENGINEERING = 12.2,
		JOB_SECURITY_OFFICER_MEDICAL = 12.3,
		JOB_SECURITY_OFFICER_SCIENCE = 12.4,
		JOB_DETECTIVE = 13,
		JOB_RUSSIAN_OFFICER = 14,
		JOB_VETERAN = 15,
		JOB_FIELD_MEDIC = 16,
		// 20-29: Medbay
		JOB_CHIEF_MEDICAL_OFFICER = 20,
		JOB_CHEMIST = 21,
		JOB_VIROLOGIST = 22,
		JOB_MEDICAL_DOCTOR = 23,
		JOB_PARAMEDIC = 24,
		// 30-39: Science
		JOB_RESEARCH_DIRECTOR = 30,
		JOB_SCIENTIST = 31,
		JOB_ROBOTICIST = 32,
		JOB_GENETICIST = 33,
		JOB_HACKER = 34,
		// 40-49: Engineering
		JOB_CHIEF_ENGINEER = 40,
		JOB_STATION_ENGINEER = 41,
		JOB_ATMOSPHERIC_TECHNICIAN = 42,
		JOB_MECHANIC = 43,
		// 50-59: Cargo
		JOB_HEAD_OF_PERSONNEL = 50,
		JOB_QUARTERMASTER = 51,
		JOB_SHAFT_MINER = 52,
		JOB_CARGO_TECHNICIAN = 53,
		JOB_TRADER = 54,
		JOB_HUNTER = 55,
		// 60+: Civilian/other
		JOB_BARTENDER = 61,
		JOB_COOK = 62,
		JOB_BOTANIST = 63,
		JOB_CURATOR = 64,
		JOB_CHAPLAIN = 65,
		JOB_CLOWN = 66,
		JOB_MIME = 67,
		JOB_JANITOR = 68,
		JOB_LAWYER = 69,
		JOB_PSYCHOLOGIST = 71,
		// ANYTHING ELSE = UNKNOWN_JOB_ID, Unknowns/custom jobs will appear after civilians, and before assistants
		JOB_BOMJ = 998,
		JOB_ASSISTANT = 999,

		// 200-229: Centcom
		JOB_CENTCOM_ADMIRAL = 200,
		JOB_CENTCOM_COMMANDER = 210,
		JOB_CENTCOM_CUSTODIAN = 211,
		JOB_CENTCOM_MEDICAL_DOCTOR = 212,
		JOB_CENTCOM_RESEARCH_OFFICER = 213,
		JOB_ERT_COMMANDER = 220,
		JOB_ERT_OFFICER = 221,
		"Engineer Response Officer" = 222,
		JOB_ERT_MEDICAL_DOCTOR = 223
	)

/datum/crewmonitor/ui_interact(mob/user, datum/tgui/ui)
	. = ..()
	ui = SStgui.try_update_ui(user, src, ui)
	if (!ui)
		ui = new(user, src, "CrewConsole")
		ui.open()

/datum/crewmonitor/proc/show(mob/M, source)
	ui_sources[WEAKREF(M)] = source
	ui_interact(M)

/datum/crewmonitor/ui_host(mob/user)
	return ui_sources[WEAKREF(user)]

/datum/crewmonitor/ui_data(mob/user)
	var/z = user.z
	if(!z)
		var/turf/T = get_turf(user)
		z = T.z
	. = list(
		"sensors" = update_data(z),
		"link_allowed" = isAI(user)
	)

/datum/crewmonitor/proc/update_data(z)
	if(data_by_z["[z]"] && last_update["[z]"] && world.time <= last_update["[z]"] + SENSORS_UPDATE_PERIOD)
		return data_by_z["[z]"]

	var/list/results = list()
	var/obj/item/clothing/under/U
	var/obj/item/card/id/I
	var/turf/pos
	var/ijob
	var/name
	var/assignment
	var/oxydam
	var/toxdam
	var/burndam
	var/brutedam
	var/area
	var/pos_x
	var/pos_y
	var/life_status

	for(var/mob/living/carbon/human/H in GLOB.carbon_list)
		var/nanite_sensors = FALSE
		if(H in SSnanites.nanite_monitored_mobs)
			nanite_sensors = TRUE
		// Check if their z-level is correct and if they are wearing a uniform.
		// Accept H.z==0 as well in case the mob is inside an object.
		if ((H.z == 0 || H.get_virtual_z_level() == z || (is_station_level(H.z) && is_station_level(z))) && (istype(H.w_uniform, /obj/item/clothing/under) || nanite_sensors))
			U = H.w_uniform

			//Radio transmitters are jammed
			if(nanite_sensors ? H.is_jammed() : U.is_jammed())
				continue

			// Are the suit sensors on?
			if (nanite_sensors || ((U.has_sensor > 0) && U.sensor_mode))
				pos = H.z == 0 || (nanite_sensors || U.sensor_mode == SENSOR_COORDS) ? get_turf(H) : null

				// Special case: If the mob is inside an object confirm the z-level on turf level.
				if (H.z == 0 && (!pos || (pos.get_virtual_z_level() != z) && !(is_station_level(pos.z) && is_station_level(z))))
					continue

				I = H.wear_id ? H.wear_id.GetID() : null

				if (I)
					name = I.registered_name
					assignment = I.assignment
					ijob = jobs[I.assignment]
				else
					name = "Неизвестный"
					assignment = ""
					ijob = UNKNOWN_JOB_ID

				if (nanite_sensors || U.sensor_mode >= SENSOR_LIVING)
					life_status = (!H.stat ? TRUE : FALSE)
				else
					life_status = null

				if (nanite_sensors || U.sensor_mode >= SENSOR_VITALS)
					oxydam = round(H.getOxyLoss(),1)
					toxdam = round(H.getToxLoss(),1)
					burndam = round(H.getFireLoss(),1)
					brutedam = round(H.getBruteLoss(),1)
				else
					oxydam = null
					toxdam = null
					burndam = null
					brutedam = null

				if (nanite_sensors || U.sensor_mode >= SENSOR_COORDS)
					if (!pos)
						pos = get_turf(H)
					area = get_area_name(H, TRUE)
					pos_x = pos.x
					pos_y = pos.y
				else
					area = null
					pos_x = null
					pos_y = null

				results[++results.len] = list("name" = name, "assignment" = assignment, "ijob" = ijob, "life_status" = life_status, "oxydam" = oxydam, "toxdam" = toxdam, "burndam" = burndam, "brutedam" = brutedam, "area" = area, "pos_x" = pos_x, "pos_y" = pos_y, "can_track" = H.can_track(null))

	data_by_z["[z]"] = sortTim(results,/proc/sensor_compare)
	last_update["[z]"] = world.time

	return results

/proc/sensor_compare(list/a,list/b)
	return a["ijob"] - b["ijob"]

/datum/crewmonitor/ui_act(action,params)
	. = ..()
	if(.)
		return
	switch (action)
		if ("select_person")
			var/mob/living/silicon/ai/AI = usr
			if(!istype(AI))
				return
			AI.ai_camera_track(params["name"])

#undef SENSORS_UPDATE_PERIOD
#undef UNKNOWN_JOB_ID
